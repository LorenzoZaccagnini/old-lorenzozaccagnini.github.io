{"pages":[{"date":"2022-12-20","image":"/images/post_pics/evm-intercept.jpg","link":"https://lorenzozaccagnini.github.io/posts/evm-intercept-tx-rad/","summary":"Transactions on blockchain are not instant. They are pending until they are confirmed by the network. This is a security feature of the blockchain. This is why it is important to wait for the transaction to be confirmed before sending another transaction. In this article we will see how to intercept pending transactions with rust.\n1. Transaction lifecycle An Ethereum transaction lifecycle is as follows:\nThe transaction is created and signed by the sender.","tags":["alchemy","arbitrage","blockchain","bot","frontrunning","oracle","rust","web3"],"text":"transactions on blockchain are not instant. they are pending until they are confirmed by the network. this is a security feature of the blockchain. this is why it is important to wait for the transaction to be confirmed before sending another transaction. in this article we will see how to intercept pending transactions with rust.\n1. transaction lifecycle an ethereum transaction lifecycle is as follows:\nthe transaction is created and signed by the sender. the transaction is broadcasted to the network. the transaction is pending until it is confirmed by the network. the transaction is confirmed by the network. the transaction is confirmed when it is included in a block. on ethereum proof of stake network, the block is mined by a validator. the validator is a node that is running the ethereum client and is participating in the consensus. the validator is selected randomly from the network. the validator is selected based on the stake that the validator has in the network.\n2. the mempool the mempool is a pool of pending transactions. the transactions are pending until they are confirmed by the network. on ethereum we don\u0026rsquo;t have a single universal mempool. each node has its own mempool. even different clients use different jargon for the mempool.\non geth the mempool is called the transaction pool. on parity the mempool is called the transaction queue. 2.1 why intercept pending transactions? there are many reasons and one of them is money, some bots intercept pending transactions to make a profit. front running means that a bot will intercept a pending transaction and will execute another transaction before the original sender. it\u0026rsquo;s possibile to frontrun a transaction by increasing the gas price. the gas price is the amount of money that the sender is willing to pay for the transaction to be confirmed. the higher the gas price, the higher the priority of the transaction.\nlet\u0026rsquo;s make an example, you are trading a token on uniswap and you want to buy 100 tokens. you set the gas price to 10 gwei and the transaction is pending. a bot sees your transaction in the pool and increases the gas price to 20 gwei. your transaction is now pending and the bot\u0026rsquo;s transaction is confirmed before yours. the bot knows that your transaction will be executed and he will sell the tokens to you at a higher price. this is called frontrunning.\n2.2 do you want a sandwich? the ethereum network is a public network and anyone can see the pending transactions. it is possible to intercept pending transactions and make a profit. the bot will increase the gas price of the transaction and will execute the transaction before the original sender. the sandwich trading strategy is a type of frontrunning, it\u0026rsquo;s about placing a trade before and after a target trade, in order to make a profit on the slippage that has been created. the bot will buy the token and sell it to the original sender at a higher price. the bot will make a profit by selling the token at a higher price.\nin a future article we will see how to make a sandwich, but for now let\u0026rsquo;s see how to intercept and decode pending transactions.\n3. intercept pending transactions with rust in this section we will see how to intercept pending transactions with rust. we will use the web3 library to interact with the ethereum network. we will use the web3 library to intercept pending transactions and we will use the dotenv library to load the environment variables of alchemy.\n3.1 create a new rust project create a new rust project with cargo:\ncargo new intercept_tx add the dependencies to the cargo.toml file:\n[package] name = \u0026#34;evm-intercept-tx\u0026#34; version = \u0026#34;0.1.0\u0026#34; edition = \u0026#34;2021\u0026#34; [dependencies] dotenv = \u0026#34;0.15.0\u0026#34; hex = \u0026#34;0.4.3\u0026#34; tokio = \u0026#34;1.21.2\u0026#34; web3 = \u0026#34;0.18.0\u0026#34; 3.2 load the environment variables create a .env file and add the alchemy api key:\nalchemy_api_key=your_alchemy_api_key add the dotenv library to the main.rs file:\nuse dotenv::dotenv; use hex; use web3::futures::trystreamext; use web3::types::transactionid; #[tokio::main] async fn main() -\u0026gt; web3::result { dotenv().ok(); let alchemy_api_key = dotenv::var(\u0026#34;alchemy_api_key\u0026#34;).expect(\u0026#34;alchemy_api_key must be set\u0026#34;); } 3.3 connect to the ethereum network add the web3 library to the main.rs file:\nasync fn main() -\u0026gt; web3::result { dotenv().ok(); let alchemy_api_key = dotenv::var(\u0026#34;alchemy_api_key\u0026#34;).expect(\u0026#34;alchemy_api_key must be set\u0026#34;); let web3 = web3::web3::new(web3::transports::websocket::new(\u0026amp;alchemy_api_key).await?); } now you should be able to connect to the ethereum network.\n3.4 intercept pending transactions here we will use the \u0026lsquo;subscribe_new_pending_transactions\u0026rsquo; method of web3 to intercept pending transactions. the \u0026lsquo;subscribe_new_pending_transactions\u0026rsquo; method returns a stream of pending transactions.\nuse dotenv::dotenv; use hex; use web3::futures::trystreamext; use web3::types::transactionid; #[tokio::main] async fn main() -\u0026gt; web3::result { dotenv().ok(); let alchemy_api_key = dotenv::var(\u0026#34;alchemy_api_key\u0026#34;).expect(\u0026#34;alchemy_api_key must be set\u0026#34;); let web3 = web3::web3::new(web3::transports::websocket::new(\u0026amp;alchemy_api_key).await?); let mut pending_transactions = web3 .eth_subscribe() .subscribe_new_pending_transactions() .await?; while let some(pending_transaction_hash) = pending_transactions.try_next().await? { let transaction = web3 .eth() .transaction(transactionid::from(pending_transaction_hash)) .await?; if let some(transaction) = transaction { println!(\u0026#34;transaction hash: {}\u0026#34;, transaction); } } ok(()) } now we are logging every pending transaction in the node mempool. the \u0026lsquo;subscribe_new_pending_transactions\u0026rsquo; method returns a stream of pending transactions. the stream is an iterator that returns a pending transaction hash. we can use the \u0026rsquo;transaction\u0026rsquo; method of web3 to get the transaction details. the \u0026rsquo;transaction\u0026rsquo; method returns a transaction object. the transaction object contains the transaction details.\n3.5 filter pending transactions we can filter pending transactions by the destination address. we can use the \u0026rsquo;to\u0026rsquo; field of the transaction object to filter the transactions. the \u0026rsquo;to\u0026rsquo; field contains the destination address of the transaction.\nthe address 0x31c8eacbffdd875c74b94b077895bd78cf1e64a3 is the rad token. we will intercept the pending transactions of the rad token.\nuse dotenv::dotenv; use hex; use web3::futures::trystreamext; use web3::types::transactionid; #[tokio::main] async fn main() -\u0026gt; web3::result { dotenv().ok(); let alchemy_api_key = dotenv::var(\u0026#34;alchemy_api_key\u0026#34;).expect(\u0026#34;alchemy_api_key must be set\u0026#34;); let web3 = web3::web3::new(web3::transports::websocket::new(\u0026amp;alchemy_api_key).await?); let mut pending_transactions = web3 .eth_subscribe() .subscribe_new_pending_transactions() .await?; //filter transaction based on address let address = \u0026#34;0x31c8eacbffdd875c74b94b077895bd78cf1e64a3\u0026#34;; while let some(pending_transaction_hash) = pending_transactions.try_next().await? { let transaction = web3 .eth() .transaction(transactionid::from(pending_transaction_hash)) .await?; if let some(transaction) = transaction { //filter transaction based on address and method hash if transaction.to == some(address.parse().unwrap()) { //decode input data bytes to hex println!(\u0026#34;transaction: {:?}\u0026#34;, transaction); } } } ok(()) } you should be able to intercept the pending transactions of the rad token and see a log like this:\ntransaction: transaction { hash: 0x4d5564bbedd6eb902e91b3c6a1d10a4c4029a036e9c4610fd6375932e2636e95, nonce: 5442921, block_hash: some(0x15ba42779e7d34714607312e6b4f33f9a926738e527593402ff4ad15c1c7c7c2), block_number: some(16228505), transaction_index: some(28), from: some(0x28c6c06298d514db089934071355e5743bf21d60), to: some(0x31c8eacbffdd875c74b94b077895bd78cf1e64a3), value: 0, gas_price: some(16185590269), gas: 207128, input: bytes([169, 5, 156, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 160, 138, 28, 191, 39, 255, 75, 202, 197, 95, 205, 201, 124, 116, 141, 91, 81, 39, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 108, 144, 48, 150, 116, 138, 0, 0]), v: some(0), r: some(55005093721274821805649449657760135373297623073244198928033742057513000728837), s: some(19584657317945855950856553141997014012848398946606485974435162940290921668925), raw: none, transaction_type: some(2), access_list: some([]), max_fee_per_gas: some(102000000000), max_priority_fee_per_gas: some(2000000000) } 3.6 decode input data now we can intercept a pending transaction, but how to decode the input data? the input data is a byte array. we can use the \u0026rsquo;ethabi\u0026rsquo; crate to decode the input data, but in this simple case i will use the \u0026lsquo;hex\u0026rsquo; crate to decode the input data.\nuse dotenv::dotenv; use hex; use web3::futures::trystreamext; use web3::types::transactionid; #[tokio::main] async fn main() -\u0026gt; web3::result { dotenv().ok(); let alchemy_api_key = dotenv::var(\u0026#34;alchemy_api_key\u0026#34;).expect(\u0026#34;alchemy_api_key must be set\u0026#34;); let web3 = web3::web3::new(web3::transports::websocket::new(\u0026amp;alchemy_api_key).await?); let mut pending_transactions = web3 .eth_subscribe() .subscribe_new_pending_transactions() .await?; //filter transaction based on address let address = \u0026#34;0x31c8eacbffdd875c74b94b077895bd78cf1e64a3\u0026#34;; while let some(pending_transaction_hash) = pending_transactions.try_next().await? { let transaction = web3 .eth() .transaction(transactionid::from(pending_transaction_hash)) .await?; if let some(transaction) = transaction { //filter transaction based on address and method hash if transaction.to == some(address.parse().unwrap()) { //decode input data bytes to hex let tx_clone = transaction.clone(); let input_data = transaction.input.0; let input_data_hex = hex::encode(input_data); println!(\u0026#34;tx input hex: {:?}\u0026#34;, input_data_hex); //decode using abi if input_data_hex.starts_with(\u0026#34;a9059cbb\u0026#34;) { let raw_amount = input_data_hex[74..].to_string(); println!(\u0026#34;raw amount cutted hex: {:?}\u0026#34;, raw_amount); //decode raw amount to u256 let raw_amount = hex::decode(raw_amount).unwrap(); //convert to u256 let raw_amount = web3::types::u256::from_big_endian(\u0026amp;raw_amount); println!(\u0026#34;//---------------------------------------//\u0026#34;); println!(\u0026#34;raw amount: {:?}\u0026#34;, raw_amount); println!(\u0026#34;transaction: {:?}\u0026#34;, tx_clone); println!(\u0026#34;//---------------------------------------//\u0026#34;); println!(\u0026#34;transfer in pending towards rad token contract\u0026#34;); } } } } ok(()) } let\u0026rsquo;s break it down, \u0026rsquo;let input_data = transaction.input.0;\u0026rsquo; is the input data of the transaction, a byte array. we can convert it to a hex string with \u0026rsquo;let input_data_hex = hex::encode(input_data);\u0026rsquo;.\nnow we can filter the input data based on the method hash. in this case we are looking for the \u0026rsquo;transfer\u0026rsquo; method hash \u0026lsquo;a9059cbb\u0026rsquo;. if the input data starts with \u0026lsquo;a9059cbb\u0026rsquo; we can cut the first 74 characters of the input data hex string. the first 74 characters are the method hash and the address of the receiver.\nthe rest of the input data is the amount. we can convert the rest of the input data to a u256 with \u0026rsquo;let raw_amount = web3::types::u256::from_big_endian(\u0026amp;raw_amount);\u0026rsquo;. now we have the amount of the transfer in pending. we can also print the transaction to see the other data of the transaction. you should see a log like this:\ntx input hex: \u0026#34;a9059cbb000000000000000000000000b51da94ae51c339cec40d78260199f73cebbeba8000000000000000000000000000000000000000000000015954d6c905a060000\u0026#34; raw amount cutted hex: \u0026#34;0000000000000000000000000000000000000000000015954d6c905a060000\u0026#34; //---------------------------------------// raw amount: 398140000000000000000 transaction: transaction { hash: 0xee7013a832ff032fd43fc296e6ea6ffead097db2122981eb971f7f4fd5c5d0dc, nonce: 4931764, block_hash: some(0x7fc256c3640e02070d726a8f504948609d5100cbc50910515cffa708a4b01b1c), block_number: some(16228188), transaction_index: some(35), from: some(0xdfd5293d8e347dfe59e90efd55b2956a1343963d), to: some(0x31c8eacbffdd875c74b94b077895bd78cf1e64a3), value: 0, gas_price: some(20264315737), gas: 207128, input: bytes([169, 5, 156, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 29, 169, 74, 229, 28, 51, 156, 236, 64, 215, 130, 96, 25, 159, 115, 206, 187, 235, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 149, 77, 108, 144, 90, 6, 0, 0]), v: some(1), r: some(94476206653139298663972815699772140255840765385329375194390453406687512516529), s: some(34590948637004618330444175192055263866731258644152094038657143970283606957875), raw: none, transaction_type: some(2), access_list: some([]), max_fee_per_gas: some(102000000000), max_priority_fee_per_gas: some(2000000000) } //---------------------------------------// transfer in pending towards rad token contract you can confront the values here with the values on the etherscan transaction page.\n5. conclusion you can see that we know the gas details and the token amount of the transaction, guess what you can do with that information. you can use it to calculate the gas price and the gas cost of the transaction. you can also use it to calculate the amount of tokens that will be transferred when the transaction is confirmed and front-run the transaction.\nmaybe in a future article we will see how to front-run a transaction. if you have any questions or suggestions, please let me know.\n7. do you need to develop a mev bot? you can contact me lorenzo zaccagnini or elisa romondia on linkedin. if you want to support me you can donate eth or matic to 0xbf8d0d4be61de94efcceffbe5d414f911f11cbf8\n","title":"Intercept pending transactions with Rust"},{"date":"2022-11-14","image":"/images/post_pics/rust_evm_bridge.jpg","link":"https://lorenzozaccagnini.github.io/posts/evm-blockchain-rust-bridge/","summary":"A blockchain bridge is a system that allows the transfer of assets between two different blockchains. It is a crucial component of the blockchain ecosystem as it allows the interoperability of different blockchains. In this article, we will develop a bridge between two EVM-compatible blockchains. We will use the Rust programming language.\nRust is a programming language that is gaining popularity in the blockchain ecosystem. It is a multi-paradigm language that is safe, fast, and concurrent.","tags":["alchemy","blockchain","bridge","infura","oracle","rust","web3"],"text":"a blockchain bridge is a system that allows the transfer of assets between two different blockchains. it is a crucial component of the blockchain ecosystem as it allows the interoperability of different blockchains. in this article, we will develop a bridge between two evm-compatible blockchains. we will use the rust programming language.\nrust is a programming language that is gaining popularity in the blockchain ecosystem. it is a multi-paradigm language that is safe, fast, and concurrent. it is also a systems programming language that is designed to build low-level software. it is a great choice for developing blockchain bridges because of its performance and security.\n1. bridges are oracles bridges are two-way oracles, which means that they can be used to send data from one blockchain to another. the data can be anything, but in this article, we will focus on sending and burning tokens in two different evm-compatible blockchains.\nmore information about oracles can be found in my previous article: develop an ethereum oracle with rust\n2. a bridge architecture the bridge architecture is very simple from a general point of view. it consists of two smart contracts, one on each blockchain. the first contract is called the bridge contract. it is deployed on the source blockchain and it is responsible for locking or burning the tokens that need to be transferred. the second contract is called the destination contract. it is deployed on the destination blockchain and it is responsible for minting the tokens that need to be transferred. this architecture can work in both directions, but in this article, we will focus on the transfer of tokens from the source blockchain to the destination blockchain.\n3. the bridge contract in this case we will develop a \u0026ldquo;burn and mint\u0026rdquo; architecture, so the smart contract on the source blockchain will be responsible for burning the tokens that need to be transferred. the smart contract on the destination blockchain will be responsible for minting the tokens that need to be transferred. again this can work in both directions.\n3.1 the bridge token the bridge token will be a simple erc20 token. erc20 token is a standard for tokens on the ethereum blockchain. it is a very simple standard that allows the creation of tokens that can be transferred, received, and burned. i will use openzeppelin contracts to develop the bridge token. openzeppelin is a very popular library for smart contracts development. it contains a lot of useful contracts that can be used to develop smart contracts.\nburning means that the tokens are destroyed. burning tokens is a very useful feature for a token. it allows the token to be deflationary. technically means to send the tokens to the address 0x0000000000000000000000000000000000000000. this address is called the zero address and it is a special address that is used to burn tokens. no one can access the zero address, so the tokens are destroyed forever.\ntransferring assets between two blockchains without burning or locking will cause a double spending problem. the double spending problem is a problem that occurs when the same asset is spent more than once. in this case, the asset is the token. if the token is not burned or locked, it can be spent on both blockchains. this will cause a double spending problem and makes the token worthless like your developer skills.\nthis will happen with a probability of 101% because bridges are oracles. oracles are not 101% reliable. they can fail and they often fail. if this bridge fails, the token will be spent on both blockchains and people on twitter will call you a scammer. so if you are a scammer you can skip this step.\n3.2 coding the bridge contract the smart contract code will be the same on both blockchains, but deployed obviously on both blockchains. the code is very simple and it is composed of two functions: burn and mint. the burn function is responsible for burning the tokens that need to be transferred. the mint function is responsible for minting the tokens that need to be transferred.\nonly the owner of the smart contract can call the mint function. the owner of the smart contract is the address that deployed the smart contract. if someone that is not the owner of the smart contract can call the mint function, the bridge will be vulnerable to attacks and people on twitter will call you a scammer, again. so please use a multisig wallet to deploy the smart contract, so people on twitter will not call only you a scammer, but also the other people in the multisig wallet. lgtm.\nplease don\u0026rsquo;t be the owner of all the multisig wallets, because people on twitter will call you a scammer and a dictator.\nthe burn function is responsible for burning the tokens that need to be transferred and can be called by any token holder that has a balance greater than zero.\npragma solidity ^0.8.9; import \u0026#34;@openzeppelin/contracts@4.8.0/token/erc20/erc20.sol\u0026#34;; import \u0026#34;@openzeppelin/contracts@4.8.0/token/erc20/extensions/erc20burnable.sol\u0026#34;; import \u0026#34;@openzeppelin/contracts@4.8.0/access/ownable.sol\u0026#34;; contract gbridgetoken is erc20, erc20burnable, ownable { constructor() erc20(\u0026#34;gbridgetoken\u0026#34;, \u0026#34;gbt\u0026#34;) { _mint(msg.sender, 1000 * 10**decimals()); } function mint(address to, uint256 amount) public onlyowner { _mint(to, amount); } } the functions with the underscore are inherited from the openzeppelin contracts. the mint function is responsible for minting the tokens. the burn function is responsible for burning the tokens. the onlyowner modifier is responsible for checking if the caller of the function is the owner of the smart contract. the owner is the address that deployed the smart contract. the msg.sender is the address that called the function.\nin the constructor i premint 1000 tokens and i assign them to the address that deployed the smart contract. this is not necessary, but it is a good practice to premint some tokens to the address that deployed the smart contract. this will allow the owner of the smart contract to test the bridge before deploying it on the mainnet.\n3.3 deploy the bridge contracts the bridge contracts can be deployed on any evm-compatible blockchain. in this article, i will deploy the bridge contracts on two local ganache blockchains. one on localhost:8545 and one on localhost:7545.\ni use remix to connect to the ganache blockchains. remix is a web ide for smart contracts development. it is very useful for testing smart contracts. it allows you to connect to different blockchains and to deploy smart contracts. it also allows you to interact with the smart contracts.\ncopy the code into remix, compile, select the ganache local chain and deploy the smart contract. if you don\u0026rsquo;t know how to do this you are on the dunning-kruger curve bad side and you should not be developing smart contracts. if you are scammer you can skip this step.\njokes apart, learn the basics before developing smart contracts and oracles, people can get really angry on twitter.\n4. events events are a very useful feature of smart contracts. they allow you to log data in the blockchain. the data can be anything, but in this case, we will listen to the transfer event of the bridge token. the transfer event is emitted every time a token is transferred.\nif the contracts are deployed correctly you will see transfer events mint or burn are called. the burn event should look like this:\n\u0026#34;topics\u0026#34;: [ \u0026#34;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\u0026#34;, \u0026#34;0x000000000000000000000000399cf2e8d5c14ac04f1599c844a42be4d712b3eb\u0026#34;, \u0026#34;0x0000000000000000000000000000000000000000000000000000000000000000\u0026#34; ] the event signature for erc20 transfers, equals sha3(\u0026ldquo;transfer(address,address,uint256)\u0026rdquo;), to know more about events and topic check my other article develop an ethereum oracle with rust\n5. the bridge rust code the rust code is in part taken from the article develop an ethereum oracle with rust. the rust code is responsible for listening to the transfer events of the bridge token and for calling the mint function of the bridge contract on the destination blockchain when a transfer event to the zero address (a burn) is detected.\n5.1 the bridge crates this the cargo.toml file used:\n[package] name = \u0026#34;blockchain_oracle\u0026#34; version = \u0026#34;0.1.0\u0026#34; edition = \u0026#34;2021\u0026#34; # see more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] web3 = \u0026#34;0.17.0\u0026#34; tokio = { version= \u0026#34;1\u0026#34;, features = [\u0026#34;full\u0026#34;] } hex = \u0026#34;0.4.3\u0026#34; ethnum = \u0026#34;1.3.0\u0026#34; web3 is the crate used to interact with the blockchain. tokio is the crate used to run the async code. hex is the crate used to convert the bytes to hex. ethnum is the crate used to convert the bytes to u256. 5.2 connecting to the blockchain let\u0026rsquo;s start by connecting to the blockchain.\nuse ethnum::u256; use web3::contract::{contract, options}; use web3::futures::streamext; #[tokio::main] async fn main() -\u0026gt; web3::contract::result\u0026lt;()\u0026gt; { let web3_source_chain_ws = web3::web3::new(web3::transports::websocket::new(\u0026#34;ws://localhost:8545\u0026#34;).await?); } the first part imports the crates, the second part is the main function, the third part is the code that connects to the blockchain. the web3_source_chain_ws is the web3 instance used to connect to the source blockchain.\n5.3 listening to the transfer events here i filter and decode the transfer event, dividing the burn and normal transfer events.\nuse ethnum::u256; use web3::contract::{contract, options}; use web3::futures::streamext; #[tokio::main] async fn main() -\u0026gt; web3::contract::result\u0026lt;()\u0026gt; { let web3_source_chain_ws = web3::web3::new(web3::transports::websocket::new(\u0026#34;ws://localhost:8545\u0026#34;).await?); let event_signature = \u0026#34;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\u0026#34;; let source_sc_address = \u0026#34;0xb9d01d2e0ff04a2ff2f0720dd69e73f7671b55ce\u0026#34;; let filter_source_transfer = web3::types::filterbuilder::default() .address(vec![source_sc_address.parse().unwrap()]) .from_block(web3::types::blocknumber::latest) .topics( some(vec![event_signature.parse().unwrap()]), none, none, none, ) .build(); let sub_ganache = web3_source_chain_ws .eth_subscribe() .subscribe_logs(filter_source_transfer) .await?; let sub_ganache_logging = sub_ganache.for_each(|log| async move { let address = format!(\u0026#34;{:?}\u0026#34;, log.clone().unwrap().topics[2]); match address.as_str() { \u0026#34;0x0000000000000000000000000000000000000000000000000000000000000000\u0026#34; =\u0026gt; { println!(\u0026#34;burned\u0026#34;); let amount_decoded = u256::from_str_radix(\u0026amp;hex::encode(log.unwrap().data.0), 16).unwrap(); println!(\u0026#34;amount burned: {}\u0026#34;, amount_decoded); } _ =\u0026gt; { println!(\u0026#34;transferred\u0026#34;); } } }); sub_ganache_logging.await; ok(()) } the amount is not indexed so i decode it from the data field. the address is the second topic of the event, is where the token are sent, so i check if it is the zero address to know if it is a burn or a normal transfer.\nif everything is working correctly you should see the burned and amount burned printed in the console, when you call the burn function on the source blockchain.\nburned amount burned: 666 5.4 load the smart contract now we can listen, half of the work is done. now we need to load the smart contract on the destination blockchain. we create a new function mint_tokens\nasync fn mint_tokens(amount: u64, account_target: \u0026amp;str, smart_contract_address: \u0026amp;str) { let web3_destination_chain = web3::web3::new(web3::transports::http::new(\u0026#34;http://localhost:7545\u0026#34;).unwrap()); let web3_destination_chain_contract = contract::from_json( web3_destination_chain.eth(), smart_contract_address.parse().unwrap(), include_bytes!(\u0026#34;gbridgetoken.json\u0026#34;), ) .unwrap(); the web3_destination_chain_contract is the contract instance on the destination blockchain. the include_bytes! macro is used to include the abi of the smart contract. the abi is generated by the solc compiler. the json file is the abi that is generated by the solc compiler or remix ide.\n5.5 minting the tokens now we can mint the tokens on the destination blockchain when we receive a burn event on the source blockchain.\nasync fn mint_tokens(amount: u64, account_target: \u0026amp;str, smart_contract_address: \u0026amp;str) { let web3_destination_chain = web3::web3::new(web3::transports::http::new(\u0026#34;http://localhost:7545\u0026#34;).unwrap()); let web3_destination_chain_contract = contract::from_json( web3_destination_chain.eth(), smart_contract_address.parse().unwrap(), include_bytes!(\u0026#34;gbridgetoken.json\u0026#34;), ) .unwrap(); let ganache_accounts = web3_destination_chain.eth().accounts().await.unwrap(); let account = ganache_accounts[0]; //convert account_target to address let account_target_address = web3::types::address::from_slice(\u0026amp;hex::decode(account_target.replace(\u0026#34;0x\u0026#34;, \u0026#34;\u0026#34;)).unwrap()); web3_destination_chain_contract .call( \u0026#34;mint\u0026#34;, (account_target_address, amount), account, options::default(), ) .await .unwrap(); } first i get the accounts from the destination blockchain, then i convert the account_target to an address. the account_target sends token to the same address on the destination blockchain.\nthe account is the account that will call the mint function, it should be the owner of the smart contract on the destination blockchain. the options::default() is used to set the gas price and gas limit. the web3_destination_chain_contract.call is used to call the mint function.\nthe amount is the amount of tokens that will be minted on the destination blockchain, it is same quantity of the burned tokens on the source blockchain.\nif you see the token balance of the account_target on the destination blockchain, you should see the added the amount of tokens that you burned on the source blockchain.\n5.6 putting it all together now we can put it all together. we need to listen to the transfer events on the source blockchain and mint the tokens on the destination blockchain.\nall the code can be found in this github repository\nuse ethnum::u256; use web3::contract::{contract, options}; use web3::futures::streamext; #[tokio::main] async fn main() -\u0026gt; web3::contract::result\u0026lt;()\u0026gt; { let web3_source_chain_ws = web3::web3::new(web3::transports::websocket::new(\u0026#34;ws://localhost:8545\u0026#34;).await?); let event_signature = \u0026#34;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\u0026#34;; let source_sc_address = \u0026#34;0xb9d01d2e0ff04a2ff2f0720dd69e73f7671b55ce\u0026#34;; let destionation_sc_address = \u0026#34;0x4641b307794e29062906dc5fed72152faebb1c77\u0026#34;; let filter_source_transfer = web3::types::filterbuilder::default() .address(vec![source_sc_address.parse().unwrap()]) .from_block(web3::types::blocknumber::latest) .topics( some(vec![event_signature.parse().unwrap()]), none, none, none, ) .build(); let sub_ganache = web3_source_chain_ws .eth_subscribe() .subscribe_logs(filter_source_transfer) .await?; let sub_ganache_logging = sub_ganache.for_each(|log| async move { let address = format!(\u0026#34;{:?}\u0026#34;, log.clone().unwrap().topics[2]); let address_from_raw = format!(\u0026#34;{:?}\u0026#34;, log.clone().unwrap().topics[1]); let address_from_decoded = format!(\u0026#34;0x{}\u0026#34;, \u0026amp;address_from_raw[26..66]); match address.as_str() { \u0026#34;0x0000000000000000000000000000000000000000000000000000000000000000\u0026#34; =\u0026gt; { println!(\u0026#34;burned\u0026#34;); let amount_decoded = u256::from_str_radix(\u0026amp;hex::encode(log.clone().unwrap().data.0), 16).unwrap(); println!(\u0026#34;amount burned: {}\u0026#34;, amount_decoded); //mint tokens on the destination chain mint_tokens( amount_decoded.as_u64(), \u0026amp;address_from_decoded, \u0026amp;destionation_sc_address, ) .await; println!(\u0026#34;burned from: {}\u0026#34;, address_from_decoded); } _ =\u0026gt; { println!(\u0026#34;transferred\u0026#34;); } } }); sub_ganache_logging.await; ok(()) } async fn mint_tokens(amount: u64, account_target: \u0026amp;str, smart_contract_address: \u0026amp;str) { let web3_destination_chain = web3::web3::new(web3::transports::http::new(\u0026#34;http://localhost:7545\u0026#34;).unwrap()); let web3_destination_chain_contract = contract::from_json( web3_destination_chain.eth(), smart_contract_address.parse().unwrap(), include_bytes!(\u0026#34;gbridgetoken.json\u0026#34;), ) .unwrap(); let ganache_accounts = web3_destination_chain.eth().accounts().await.unwrap(); let account = ganache_accounts[0]; //convert account_target to address let account_target_address = web3::types::address::from_slice(\u0026amp;hex::decode(account_target.replace(\u0026#34;0x\u0026#34;, \u0026#34;\u0026#34;)).unwrap()); web3_destination_chain_contract .call( \u0026#34;mint\u0026#34;, (account_target_address, amount), account, options::default(), ) .await .unwrap(); } i\u0026rsquo;ve added the mint function to the main function when a burn event is detected. the mint_tokens function is the same as the one we used in the previous section.\n6. aggregate transactions on a bridge oracle an efficient bridge oracle will aggregate the transactions before sending them to the destination blockchain. it\u0026rsquo;s really important to aggregate the transactions because it will reduce the gas cost and the transaction fees, imagine a bridge oracle use thousand of times every day that will send a transaction for each transfer event, it will be really expensive.\nin order to do that is possible to use data structure like a merkle tree. a merkle tree is a data structure that allows to aggregate the transactions and verify the aggregated transactions. in the future we will see the use of verkle trees that are more efficient than merkle trees. maybe this topic will be covered in a future article.\n7. do you need to develop an oracle or a bridge? you can contact me lorenzo zaccagnini or elisa romondia on linkedin. if you want to support me you can donate eth or matic to 0xbf8d0d4be61de94efcceffbe5d414f911f11cbf8\n","title":"Develop an Ethereum bridge with Rust"},{"date":"2022-10-22","image":"/images/post_pics/oraclecover.jpg","link":"https://lorenzozaccagnini.github.io/posts/simple-rust-oracle/","summary":"A blockchain oracle is a service that allows smart contracts to interact with external data sources. In this post, we will develop a simple oracle that will track every time a Ethereum Name Service NFT is transferred. We will use Rust and the web3 crate to interact with the Ethereum blockchain.\nStay with me until the end to learn how to listen to events on the Ethereum blockchain, you will learn how events work and how to use them in your smart contracts and oracles.","tags":["alchemy","blockchain","infura","oracle","rust","web3"],"text":"a blockchain oracle is a service that allows smart contracts to interact with external data sources. in this post, we will develop a simple oracle that will track every time a ethereum name service nft is transferred. we will use rust and the web3 crate to interact with the ethereum blockchain.\nstay with me until the end to learn how to listen to events on the ethereum blockchain, you will learn how events work and how to use them in your smart contracts and oracles. interoperability is a key feature of the ethereum blockchain, and oracles are a key component of this interoperability.\n1. why blockchains can\u0026rsquo;t access external data sources blockchains can\u0026rsquo;t access external data sources natively because it is a deterministic system. each node in the network has a copy of the blockchain, they must all agree on the same state. if a smart contract was able to access external data sources, it would break the deterministic nature of the blockchain. the verification of the state of the blockchain would be impossible, remember same inputs always produce the same outputs.\nwe can solve this problem by using a blockchain oracle. a blockchain oracle is a service that allows smart contracts to interact with external data sources. the oracle will be responsible for fetching the external data and sending it to the smart contract. the smart contract will then be able to access the data.\nlet\u0026rsquo;s make an example to illustrate this. let\u0026rsquo;s say we have a smart contract that stores the current price of a cryptocurrency. if the price of the cryptocurrency is updated every 10 seconds on an external api, the smart contract will have to be updated every 10 seconds, otherwise the smart contract will be out of sync. it would impossible for others to verify the state of the blockchain.\nthis is why blockchains need oracles, external data must be fed into the blockchain with a transaction, in this way all nodes in the network will have the same data and the blockchain will remain deterministic.\nread this fantastic answer on stackoverflow to learn more about that\nin my experience i\u0026rsquo;ve developed many blockchain oracles, for our project devoleum and for many other projects. i\u0026rsquo;ve used different languages but rust is the one that i love the most. i\u0026rsquo;ve developed oracles for various use cases:\ncrosschain bridges connecting iot to the ethereum blockchain display data from the blockchain for a frontend that does not have access to the blockchain via a browser wallet like metamask. 2. what is an oracle? most of the time is a simple service that listens to events on the blockchain and updates the state of the smart contract. it can also be a smart contract that is called by other smart contracts to get external data. in this article we will develop a simple service that will listen to events on the ethereum blockchain, more precisely the transfer event of ens nfts.\ndifferent types of oracles exist, some of them are:\ninbound oracles: they listen to events on the blockchain outbound oracles: they send transactions to the blockchain hybrid oracles: they listen to events on the blockchain and send transactions to the blockchain 3. setup the ethereum oracle project we will develop a simple oracle that will listen to the transfer event of ens nfts. we will use rust and the web3 crate to interact with the ethereum blockchain. we will use the alchemy api to interact with the ethereum blockchain, otherwise it will be necessary to run a full node.\nall the code of this article is available on github.\n3.1. install rust if you don\u0026rsquo;t have rust installed on your machine, you can follow the official installation guide.\n3.2. create a new project we will use the cargo command to create a new project. cargo is the rust package manager and build system.\ncargo new simple-rust-oracle 3.3. add the dependencies we will add the web3 and other dependencies to our cargo.toml file:\nweb3 crate is a rust library for interacting with ethereum and other blockchain nodes. it provides a full set of features for interacting with the blockchain, including sending transactions, reading data from the blockchain, and listening to events. tokio is a runtime for asynchronous rust applications. the dotenv crate is used to load environment variables from a .env file, we\u0026rsquo;ll use it to load our alchemy api key without hardcoding it in our code (and exposing it to the world). ethnum is used to handle big unsigned integers. this is how our cargo.toml file should look like:\n[dependencies] web3 = \u0026#34;0.17.0\u0026#34; tokio = { version= \u0026#34;1\u0026#34;, features = [\u0026#34;full\u0026#34;] } dotenv = \u0026#34;0.15.0\u0026#34; ethnum = \u0026#34;1.3.0\u0026#34; 3.4. create a .env file we will create a .env file at the root of our project. we will store our alchemy api key in this file and load it with the dotenv crate.\nyou can use infura instead of alchemy, just replace the alchemy api key with your infura api key.\nin both cases you have to signup to get an api key. i will use the mainnet api key to listen to the ens nfts transfer events. you can use the testnet api key if you want to test the oracle on the testnet.\ntouch .env the .env file should look like this:\nalchemy_api_key=wss://eth-mainnet.g.alchemy.com/v2/s0mer4nd0mstr1ng 4. develop the ethereum oracle 4.1. load the environment variables we will load the environment variables with the dotenv crate. we will use the dotenv::dotenv() function to load the environment variables from the .env file. we will use the dotenv::var() function to get the value of a specific environment variable.\nuse dotenv::dotenv; fn main() { dotenv().ok(); let alchemy_api_key = dotenv::var(\u0026#34;alchemy_api_key\u0026#34;).expect(\u0026#34;alchemy_api_key must be set\u0026#34;); } 4.2. connect to the ethereum blockchain we will use the web3 crate and the alchemy api to connect to the ethereum blockchain.\nuse dotenv::dotenv; use web3; fn main() { dotenv().ok(); let alchemy_api_key = dotenv::var(\u0026#34;alchemy_api_key\u0026#34;).expect(\u0026#34;alchemy_api_key must be set\u0026#34;); let web3 = web3::web3::new(web3::transports::http::new(\u0026amp;alchemy_api_key).unwrap()); } 4.3. filter to the ens nfts transfer events we need to know the ens smart contract address to listen to the transfer events. we can find the address of the ens smart contract on etherscan.\nwait! we want to listen to a specific event, not to every event of the smart contract so we need to know the event signature. the event signature is the hash of the event name and the event parameters.\nsignature or topic0 = 0x + keccak256(\u0026ldquo;transfer(address,address,uint256)\u0026rdquo;))\n0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef = transfer(address,address,uint256)\nas you can see here on etherscan the event signature is 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.\nlet\u0026rsquo;s code it!\nuse dotenv::dotenv; use web3; #[tokio::main] async fn main() -\u0026gt; result\u0026lt;(), box\u0026lt;dyn std::error::error\u0026gt;\u0026gt; { dotenv().ok(); let alchemy_api_key = dotenv::var(\u0026#34;alchemy_api_key\u0026#34;).expect(\u0026#34;alchemy_api_key must be set\u0026#34;); let web3 = web3::web3::new(web3::transports::websocket::new(\u0026amp;alchemy_api_key).await?); let contract_address = \u0026#34;0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\u0026#34;; let event_signature = \u0026#34;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\u0026#34;; let filter = web3::types::filterbuilder::default() .address(vec![contract_address.parse().unwrap()]) .from_block(web3::types::blocknumber::latest) .topics( some(vec![event_signature.parse().unwrap()]), none, none, none, ) .build(); ok(()) } as you can read i set the contract address and the event signature. i also wrote the filter to listen to the latest block. the filter contains the contract address and the event signature. note that i\u0026rsquo;ve used the topics function to filter to the specific event and tokio to run the code asynchronously.\n4.4. listen and print the ethereum ens transfer events now we need to subscribe to the filter and listen to the events. we will use the web3.eth_subscribe() function to subscribe to the filter. we will use the web3::types::log struct to decode the event data.\nuse dotenv::dotenv; use web3; use web3::futures::{future, streamext}; #[tokio::main] async fn main() -\u0026gt; result\u0026lt;(), box\u0026lt;dyn std::error::error\u0026gt;\u0026gt; { dotenv().ok(); let alchemy_api_key = dotenv::var(\u0026#34;alchemy_api_key\u0026#34;).expect(\u0026#34;alchemy_api_key must be set\u0026#34;); let web3 = web3::web3::new(web3::transports::websocket::new(\u0026amp;alchemy_api_key).await?); let contract_address = \u0026#34;0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\u0026#34;; let event_signature = \u0026#34;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\u0026#34;; let filter = web3::types::filterbuilder::default() .address(vec![contract_address.parse().unwrap()]) .from_block(web3::types::blocknumber::latest) .topics( some(vec![event_signature.parse().unwrap()]), none, none, none, ) .build(); let transfer_listen = web3.eth_subscribe().subscribe_logs(filter).await?; transfer_listen .for_each(|log| { println!(\u0026#34;log: {:?}\u0026#34;, log); future::ready(()) }) .await; ok(()) } i\u0026rsquo;ve used future::ready to run the code asynchronously. i\u0026rsquo;ve also used the for_each function to iterate over the events.\nthe result should be this:\n4.5. decode the event data we need to decode the event data to get the transfer details. first, we import ethnum, after we decode the event data in the transfer_listen loop. we get the hex string of token id from the fourth topic, after i use from_str_radix() from ethnum to convert the hex string to a u256.\nuse dotenv::dotenv; use ethnum::u256; use web3; use web3::futures::{future, streamext}; #[tokio::main] async fn main() -\u0026gt; result\u0026lt;(), box\u0026lt;dyn std::error::error\u0026gt;\u0026gt; { dotenv().ok(); let alchemy_api_key = dotenv::var(\u0026#34;alchemy_api_key\u0026#34;).expect(\u0026#34;alchemy_api_key must be set\u0026#34;); let web3 = web3::web3::new(web3::transports::websocket::new(\u0026amp;alchemy_api_key).await?); let contract_address = \u0026#34;0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\u0026#34;; let event_signature = \u0026#34;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\u0026#34;; let filter = web3::types::filterbuilder::default() .address(vec![contract_address.parse().unwrap()]) .from_block(web3::types::blocknumber::latest) .topics( some(vec![event_signature.parse().unwrap()]), none, none, none, ) .build(); let transfer_listen = web3.eth_subscribe().subscribe_logs(filter).await?; transfer_listen .for_each(|log| { let id = format!(\u0026#34;{:?}\u0026#34;, log.unwrap().topics[3]); println!(\u0026#34;id not decoded: {:?}\u0026#34;, id); let id_decoded = u256::from_str_radix(\u0026amp;id[2..], 16).unwrap(); println!(\u0026#34;id decoded: {:?}\u0026#34;, id_decoded); println!(\u0026#34;----------\u0026#34;); future::ready(()) }) .await; ok(()) } the result should be this:\n5. do you need to develop an oracle or a bridge? you can contact me lorenzo zaccagnini or elisa romondia on linkedin. if you want to support me you can donate eth or matic to 0xbf8d0d4be61de94efcceffbe5d414f911f11cbf8\n","title":"Develop an Ethereum oracle with Rust"},{"date":"2022-08-16","image":"","link":"https://lorenzozaccagnini.github.io/pages/about/","summary":"Who is Lorenzo \u0026lsquo;Thorrwulf\u0026rsquo; Zaccagnini Smart contract auditor and cryptography nerd, follow me on my Twitch channel Thorrwulf. It\u0026rsquo;s possible to contact me on Telegram at @Thorrwulf.\nI built my first p2p client and hub at 14y in C++, now I prefer Rust. The long part…\nI\u0026rsquo;ve years of experience in teaching and developing web apps (front and backend in Javascript), and decentralized apps on EVM blockchains like Ethereum. I have extensive knowledge about vulnerabilities of smart contracts and web apps, my analysis and audits often appear in national and international media, with topics ranging from contact tracing apps to DAOs NFTs Oracles, and Defi projects.","tags":[],"text":"who is lorenzo \u0026lsquo;thorrwulf\u0026rsquo; zaccagnini smart contract auditor and cryptography nerd, follow me on my twitch channel thorrwulf. it\u0026rsquo;s possible to contact me on telegram at @thorrwulf.\ni built my first p2p client and hub at 14y in c++, now i prefer rust. the long part…\ni\u0026rsquo;ve years of experience in teaching and developing web apps (front and backend in javascript), and decentralized apps on evm blockchains like ethereum. i have extensive knowledge about vulnerabilities of smart contracts and web apps, my analysis and audits often appear in national and international media, with topics ranging from contact tracing apps to daos nfts oracles, and defi projects. i\u0026rsquo;m the co-founder of devoleum, a web app that uses blockchains and linked open data to make supply chain data open and traceable, our project is internationally awarded by forbes usa and many others. in 2016 i have won a national hackathon with an app about geo tracing using e2e cryptography design. i have a psychology msc. i\u0026rsquo;m a privacy and diversity activist.\nhonours, awards, publications october 2021 - hp anche hitler col green pass dopo un attacco hacker. ma già non funziona più (l. bianchi)\nhttps://www.huffingtonpost.it/entry/green-pass-attacco-hacker-sottrae-le-chiavi-per-generarlo-ma-lallarme-dura-poco_it_61792986e4b079111a5eb6a5\napril 2021 - exchange, hacker e annunci di nuove tasse: dilaga il panico nel mondo delle criptovalute (n. borzi)\nhttps://www.ilfattoquotidiano.it/in-edicola/articoli/2021/04/26/exchange-attacchi-hacker-e-annunci-di-nuove-tasse-un-tremito-scuote-il-mondo-delle-criptovalute\nmay 2021 - blockchain technology and sustainable business models:\na case study of devoleum - published paper https://doi.org/10.3390/su13105619\napril 2020 - fq article about italian contact tracing app issues (n. borzi)\nitalian contact tracing app privacy and cybersecurity issues https://www.ilfattoquotidiano.it/in-edicola/articoli/2020/04/23/ombre-e-problemi-della-app-con-cui-vogliono-tracciarci/5779330/\napril 2020 - healthcare data economy (n. borzi)\narticle about the privacy issues in the healthcare data trading sector https://valori.it/emergenza-sanitaria-apre-data-economy/\nnovember 2019 - strategy innovation forum\nselected as a speaker for the blockchain and ai supply chain sector, at the university of venice ca\u0026rsquo; foscari https://www.unive.it/pag/34335/\napril 2019 - italian chamber of deputies\ninvited as a speaker about \u0026ldquo;managing big streams of data using blockchain and ai\u0026rdquo; https://www.youtube.com/watch?v=xoobvszjpxe\nseptember 2018 - 60 women-led startups that are shaking up tech across the globe\ndevoleum is mentioned in the forbes top 60 startups worldwide https://www.forbes.com/sites/allysonkapin/2018/09/19/60-women-led-startups-who-are-shaking-up- tech-across-the-globe/#1bf7fa4075da\nfebruary 2018 - scholarship winner | google developer challenge, mobile web specialist nanodegree by google e udacity\nhttps://www.udacity.com/course/mobile-web-specialist-nanodegree--nd024 selected by google and udacity for my coding skills among more than 200,000 candidate developers.\ndecember 2017 - press about devoleum, il messaggero newspaper, excellence of the universities of rome\nhttp://www.ilmessaggero.it/roma/cronaca/roma_laureati_con_il_pollice_verde_start_up_e_rob ot_per_i_campi_con_l_universita_il_lavoro_e_bio-3454639.html \u0026ldquo;con la startup dei due giovani (riconosciuta anche a parigi), invece, anche i piccoli produttori potranno certificare in maniera chiara ed onesta i loro prodotti\u0026rdquo; camilla mozzetti\ndecember 2017 - press | rtl interview about devoleum\nhttps://www.youtube.com/watch?v=77fmsopnmm4 interview with fulvio giuliani.\nnovember 2017 - press l\u0026rsquo;usine nouvelle about devoleum\nhttps://www.usinenouvelle.com/article/les-reseaux-se-mobilisent-pour-promouvoir-les- femmes-dans-le-numerique-pour-quel-resultat.n619018 \u0026ldquo;des expertes en technologie, telle la développeuse élisa romondia, qui a cofondé devoleum, une marketplace italienne utilisant la blockchain pour certifier et commercialiser des huiles d’olive produites localement.\u0026rdquo; marion garreau\noctober 2017 - press business insider about devoleum\nhttp://www.businessinsider.fr/startups-finalistes-starther-awards-2017?lipi=urn%253ali %253apage%253ad_flagship3_profile_view_base_treasury %253bm4k7ost8qocnu7d5y4sfxq%253d%253d \u0026ldquo;devoleum (italie), cofondé par elisa romondia — marketplace utilisant la blockchain afin de certifier et de commercialiser des huiles d’olives produites localement\u0026rdquo; marie-catherine beuth\noctober 2017 - press forbes about devoleum\nhttps://www.forbes.fr/femmes-at-forbes/starther-awards-la-start-up-medtech-novagray-remporte-le-concours/?lipi=urn%253ali%253apage%253ad_flagship3_profile_view_base_treasury %253briep4cantgwz0zzmycagdw%253d%253d \u0026ldquo;utiliser la blockchain pour certifier et commercialiser les huiles d’olives produites localement.\u0026rdquo; audrey chabal\noctober 2017 - press le figaro about devoleum\nhttp://www.lefigaro.fr/secteur/high-tech/start-up/2017/10/20/32004-20171020artfig00341-qui-est-derriere-novagray-la-start-up-recompensee-par-le-prix-starther.php?lipi=urn%253ali%253apage%253ad_flagship3_profile_view_base_treasury%253bfzib4h%252f1q9aw6lrtca7p7q%253d %253d \u0026ldquo;cette technologie très sophistiquée est également au cœur du projet d\u0026rsquo;elisa romondia, développe use de devoleum, afin de certifier l\u0026rsquo;origine des huiles d\u0026rsquo;olive de son italie natale\u0026rdquo; elisa braun\noctober 2017 - devoleum presented at the station f\nhttps://www.youtube.com/watch?v=xcjevegdjl0 devoleum has been selected from hundreds of european projects to take part in the 2017 starther awards, held at station f in paris, the world\u0026rsquo;s largest campus startup, home to google and facebook. the event was attended by an international jury, the french tech scene and the french government ministers.\noctober 2017 - devoleum presented station f of paris, selected for the starther awards 2017\nhttps://www.facebook.com/meetstarther/videos/vb.303376065588/10155599438350589/? type=2\u0026amp;theater devoleum was in the 10 selected among hundreds of european projects, to be presented at the station f of paris for the starther awards 2017\njuly 2017 - press wired about women in tech\nhttps://www.wired.it/attualita/tech/2017/07/05/silicon-valley-donne-italia/ \u0026ldquo;non solo silicon valley, le donne del tech sono discriminate anche in italia. startuppare e imprenditrici italiane e londinesi raccontano le loro esperienze discriminatorie simili a quelle sotto accusa in usa.\u0026rdquo; alessia camera\njune 2016 - press startup italia about dammi la mano\nhttp://startupitalia.eu/59457-20160627-digithon-startup-hackaton \u0026ldquo;il premio tim, che darà l’accesso al programma di accelerazione tim #wcap per 12 settimane, prevede lezioni e moduli di lab e di mentorship, più un confronto one to one tra professionista e startup \u0026quot; stefania leo\njune 2016 - press gazzetta del mezzogiorno italian newspaper about dammi la mano\nhttp://www.dammilamano.it/assets/images/articolo-giornale-600x455-81.png \u0026ldquo;progetti innovativi innovativi al servizio del nostro futuro\u0026rdquo;\njune 2016 - press il sole 24 ore italian newspaper about dammi la mano\nhttp://www.ilsole24ore.com/art/impresa-e-territori/2016-06-26/piattaforme-online-studenti-e- app-non-perdersi-premiati-digithon-153006.shtml?uuid=adtreyj \u0026ldquo;a “dammi la mano” è andato il premio tim che permette la partecipazione al programma di accelerazione tim #wcap con un percorso della durata di 12 settimane che prevede lezioni e moduli di lab e di mentorship e un confronto one to one tra professionista e startup.\u0026rdquo; andrea biondi\njune 2016 - press ansa about dammi la mano\nhttp://www.ansa.it/puglia/notizie/2016/06/26/vincitori-digithonbisogna-avere-tenacia_8cba16f6- bc1d-46fc-bb11-6e3f434230db.html \u0026ldquo;a dammi la mano, il progetto che consente di accompagnare ed essere accompagnati dai propri cari in tempo reale su google maps tramite l\u0026rsquo;uso del proprio smartphone, va il premio tim che dà l\u0026rsquo;accesso al programma di accelerazione tim #wcap\u0026rdquo;\njune 2016 - tim #wcap prize at digithon 2016\nhttps://www.youtube.com/watch?v=sfi4ruridce with our project \u0026ldquo;dammi la mano\u0026rdquo; we won the tim #wcap prize at digithon 2016, we have been chosen from thousands of projects. digithon 2016 was the first hackathon in italy, after our victory we received a lot of media coverage in national tv news, newspapers and online blogs.\nmarch 2013 - winner of an overseas scholarship\nduring my master degree in psychology at sapienza university of rome, i won an overseas scholarship (3 months) for york university in toronto, canada, with my project on early autism diagnosis.\n","title":"About"},{"date":"2022-08-16","image":"/images/post_pics/soulbound-nft-cover.jpg","link":"https://lorenzozaccagnini.github.io/posts/soulbound-nft/","summary":"Today we will develop a Soulbound NFT, an NFT that can be only minted and not traded or transferred, it is bounded to the first owner. We\u0026rsquo;ll do it using foundry with hardhat integrated. The Github workflow will test (foundry solidity and hardhat typescript) the contracts and uses Slither to statically analyze the code, trying to find the most common vulnerabilities.\nYou can find all the code used in my repository here","tags":["blockchain","cybersecurity","foundry","hardhat","nft","slither"],"text":"today we will develop a soulbound nft, an nft that can be only minted and not traded or transferred, it is bounded to the first owner. we\u0026rsquo;ll do it using foundry with hardhat integrated. the github workflow will test (foundry solidity and hardhat typescript) the contracts and uses slither to statically analyze the code, trying to find the most common vulnerabilities.\nyou can find all the code used in my repository here\n1. install foundry and create the project 1.1 install foundry. curl -l https://foundry.paradigm.xyz | sh 1.2 create the a new foundry project forge init soulbound-nft 1.3 install the openzeppelin library forge install openzeppelin/openzeppelin-contracts 2. write the smart contract rename the smart contract in the src folder to nfttoken.sol or the name you want.\n2.1 use a pragma solidity directive to specify the compiler version. pragma solidity ^0.8.13; use a version above 0.6.0 to avoid errors and previous vulns, like overflow and underflow. i prefer the latest stable version.\n2.2 import the openzeppelin libraries. import \u0026#34;@openzeppelin/contracts/token/erc721/erc721.sol\u0026#34;; import \u0026#34;@openzeppelin/contracts/access/ownable.sol\u0026#34;; import \u0026#34;@openzeppelin/contracts/utils/counters.sol\u0026#34;; import \u0026#34;@openzeppelin/contracts/utils/strings.sol\u0026#34;; import \u0026#34;@openzeppelin/contracts/access/ownable.sol\u0026#34;; 2.3 inherit from the erc721 and ownable contract. contract nfttoken is erc721, ownable { ... } ownable is a library that allows the contract to be owned by a single address. later we will implement the onlyowner modifier to allow only the owner to call the functions.\n2.4. setup a counter for the token incremental id. using counters for counters.counter; counters.counter private _tokenidcounter; here we are making a new counter and naming it _tokenidcounter, using the safemath library.\n2.5 setup the token name and symbol. constructor() erc721(\u0026#34;soulbound\u0026#34;, \u0026#34;sbnft\u0026#34;) {} if you feel confident you can even make a factory to create the token.\n2.6. write the safemint function. function safemint(address to) public onlyowner { uint256 tokenid = _tokenidcounter.current(); _tokenidcounter.increment(); _safemint(to, tokenid); } this function is similar to the mint function in the erc721 contract, but it is protected by the onlyowner modifier and uses the _safemint function. an internal function to safely mint a new token. reverts if the given token id already exists. if the target address is a contract, it must implement onerc721received, which is called upon a safe transfer, and return the magic value bytes4(keccak256... otherwise, the transfer is reverted. source openzeppelin documentation.\n2.7 let\u0026rsquo;s implement the soulbound features modifier onetransfer(address from) { require( from == 0x0000000000000000000000000000000000000000, \u0026#34;soulbound nft can\u0026#39;t be transferred\u0026#34; ); _; } function _beforetokentransfer( address from, address to, uint256 tokenid ) internal override onetransfer(from) { super._beforetokentransfer(from, to, tokenid); } the onetransfer modifier is used to prevent the transfer of the token to any other address, the 0x0000000000000000000000000000000000000000 address it\u0026rsquo;s an impossible from address. we implement onetransfer to the _beforetokentransfer function. the _beforetokentransfer overrides the _beforetokentransfer function in the erc721 contract, and it is called before the transfer, now we have a soulbound nft.\n2.8 recap the entire contract. // spdx-license-identifier: mit pragma solidity ^0.8.13; import \u0026#34;@openzeppelin/contracts/token/erc721/erc721.sol\u0026#34;; import \u0026#34;@openzeppelin/contracts/access/ownable.sol\u0026#34;; import \u0026#34;@openzeppelin/contracts/utils/counters.sol\u0026#34;; import \u0026#34;@openzeppelin/contracts/utils/strings.sol\u0026#34;; import \u0026#34;@openzeppelin/contracts/access/ownable.sol\u0026#34;; contract nfttoken is erc721, ownable { using counters for counters.counter; counters.counter private _tokenidcounter; constructor() erc721(\u0026#34;soulbound\u0026#34;, \u0026#34;sbnft\u0026#34;) {} modifier onetransfer(address from) { require( from == 0x0000000000000000000000000000000000000000, \u0026#34;soulbound nft can\u0026#39;t be transferred\u0026#34; ); _; } function safemint(address to) public onlyowner { uint256 tokenid = _tokenidcounter.current(); _tokenidcounter.increment(); _safemint(to, tokenid); } function _beforetokentransfer( address from, address to, uint256 tokenid ) internal override onetransfer(from) { super._beforetokentransfer(from, to, tokenid); } } 3. write foundry tests in solidity foundry tests are a way to test the contracts in solidity, they are really fast compared to truffle or hardhat. foundry is made in rust, so it\u0026rsquo;s blazing fast. rename the test contract file in the test folder to nfttoken.t.sol, or the name you want that respects the naming convention namecontract.t.sol.\n3.1 setup the test environment. // spdx-license-identifier: unlicensed pragma solidity ^0.8.13; import \u0026#34;forge-std/test.sol\u0026#34;; import \u0026#34;../src/nfttoken.sol\u0026#34;; contract nfttokentest is test { using stdstorage for stdstorage; nfttoken private nft; function setup() public { nft = new nfttoken(); } } i import the test contract, and the nfttoken contract. nfttokentest is the name of the test contract. we are using the stdstorage, a library that makes manipulating storage easy. setup() is a function that is called before each test, and it initializes the contract.\n3.2 test smart contract functions. here i\u0026rsquo;m testing the smart contract functions. the pattern is easy to understand, we test the function correct output and revert if it\u0026rsquo;s not correct with the vm.expectrevert() function. the vm.startprank() and vm.stopprank() functions are used to simulate a user that is not the owner. by using solidity to write tests we can test the smart contract functions the closest possible to a real user or external contract.\n// spdx-license-identifier: unlicensed pragma solidity ^0.8.13; import \u0026#34;forge-std/test.sol\u0026#34;; import \u0026#34;../src/nfttoken.sol\u0026#34;; contract nfttokentest is test { using stdstorage for stdstorage; nfttoken private nft; function setup() public { nft = new nfttoken(); } function testdeployment() public { asserteq(nft.name(), \u0026#34;soulbound\u0026#34;); asserteq(nft.symbol(), \u0026#34;sbnft\u0026#34;); } function testowner() public { asserteq(nft.owner(), address(this)); } function testmintfailbynotowneruser() public { vm.expectrevert(\u0026#34;ownable: caller is not the owner\u0026#34;); vm.startprank(address(2)); nft.safemint(address(2)); vm.stopprank(); } function testmint() public { nft.safemint(address(1)); asserteq(nft.balanceof(address(1)), 1); asserteq(nft.ownerof(0), address(1)); } function testtransferfail() public { nft.safemint(address(2)); vm.expectrevert(\u0026#34;soulbound nft can\u0026#39;t be transferred\u0026#34;); vm.startprank(address(2)); nft.safetransferfrom(address(2), address(3), 0); vm.stopprank(); } function testownertransfer() public { asserteq(nft.owner(), address(this)); nft.transferownership(0x1111111111111111111111111111111111111111); asserteq(nft.owner(), 0x1111111111111111111111111111111111111111); } function testownertransferfail() public { asserteq(nft.owner(), address(this)); vm.expectrevert(\u0026#34;ownable: caller is not the owner\u0026#34;); vm.startprank(address(2)); nft.transferownership(0x1111111111111111111111111111111111111111); vm.stopprank(); } } 3.3 test contract using forge forge test all test cases should pass.\n4. integrating foundry with hardhat hardhat by default expects libraries to be installed in node_modules, the default folder for all nodejs dependencies. foundry expects them to be in lib. of course we can configure foundry but not easily to the directory structure of node_modules. documentation has more information.\n4.1 install hardhat yarn init yarn add hardhat hardhat-preprocessor npx hardhat forge remappings \u0026gt; remappings.txt you will need to re-run forge remappings everytime you modify libraries in foundry. now your remappings.txt should look like this:\nds-test/=lib/solmate/lib/ds-test/src/ forge-std/=lib/forge-std/src/ openzeppelin-contracts/contracts/=lib/openzeppelin-contracts/contracts/ solmate/=lib/solmate/src/ 4.2 configure hardhat edit hardhat.config.ts to look like this:\nimport fs from \u0026#34;fs\u0026#34;; import \u0026#34;@nomicfoundation/hardhat-chai-matchers\u0026#34;; import \u0026#34;@typechain/hardhat\u0026#34;; import \u0026#34;hardhat-preprocessor\u0026#34;; import { hardhatuserconfig, task } from \u0026#34;hardhat/config\u0026#34;; function getremappings() { return fs .readfilesync(\u0026#34;remappings.txt\u0026#34;, \u0026#34;utf8\u0026#34;) .split(\u0026#34;\\n\u0026#34;) .filter(boolean) .map((line) =\u0026gt; line.trim().split(\u0026#34;=\u0026#34;)); } const config: hardhatuserconfig = { solidity: { version: \u0026#34;0.8.13\u0026#34;, settings: { optimizer: { enabled: true, runs: 200, }, }, }, paths: { sources: \u0026#34;./src\u0026#34;, // use ./src rather than ./contracts as hardhat expects cache: \u0026#34;./cache_hardhat\u0026#34;, // use a different cache for hardhat than foundry }, // this fully resolves paths for imports in the ./lib directory for hardhat preprocess: { eachline: (hre) =\u0026gt; ({ transform: (line: string) =\u0026gt; { if (line.match(/^\\s*import /i)) { getremappings().foreach(([find, replace]) =\u0026gt; { if (line.match(find)) { line = line.replace(find, replace); } }); } return line; }, }), }, }; export default config; 5. write hardhat tests in typescript 5.1 create test contract create the contract in the test folder using this name convention nfttoken.test.ts.\n5.2 write test hardhat file here we do the same as the foundry tests, but we use the hardhat expect and the to.be.revertedwith function. if the revertedwith is not recognized install the \u0026quot;@nomicfoundation/hardhat-chai-matchers package. more info here about this.\nimport { signerwithaddress } from \u0026#34;@nomiclabs/hardhat-ethers/signers\u0026#34;; import { expect } from \u0026#34;chai\u0026#34;; import { ethers } from \u0026#34;hardhat\u0026#34;; import { nfttoken } from \u0026#34;../typechain-types\u0026#34;; describe(\u0026#34;nfttoken\u0026#34;, function () { let owner: signerwithaddress; let addr1: signerwithaddress; let addr2: signerwithaddress; let nft: nfttoken; beforeeach(async function () { const nft = await ethers.getcontractfactory(\u0026#34;nfttoken\u0026#34;); nft = await nft.deploy(); await nft.deployed(); [owner, addr1, addr2] = await ethers.getsigners(); }); it(\u0026#34;should return name and symbol\u0026#34;, async function () { expect(await nft.name()).to.equal(\u0026#34;soulbound\u0026#34;); expect(await nft.symbol()).to.equal(\u0026#34;sbnft\u0026#34;); }); it(\u0026#34;should set the first account as the owner\u0026#34;, async () =\u0026gt; { expect(await nft.owner()).to.equal(owner.address); }); it(\u0026#34;should not mint a token as not the owner\u0026#34;, async () =\u0026gt; { await expect(nft.connect(addr1).safemint(addr1.address)).to.be.revertedwith( \u0026#34;ownable: caller is not the owner\u0026#34; ); }); it(\u0026#34;should mint a token as the owner\u0026#34;, async () =\u0026gt; { await nft.safemint(addr1.address); expect(await nft.ownerof(0)).to.equal(addr1.address); expect(await nft.balanceof(addr1.address)).to.equal(1); }); it(\u0026#34;should not be able to transfer soulbound token\u0026#34;, async () =\u0026gt; { await nft.safemint(owner.address); //overloaded transfer function await expect( nft[\u0026#34;safetransferfrom(address,address,uint256)\u0026#34;]( owner.address, addr2.address, 0 ) ).to.be.revertedwith(\u0026#34;soulbound nft can\u0026#39;t be transferred\u0026#34;); }); it(\u0026#34;should not transfer the contract non owner to the new owner\u0026#34;, async () =\u0026gt; { await expect( nft.connect(addr1).transferownership(addr2.address) ).to.be.revertedwith(\u0026#34;ownable: caller is not the owner\u0026#34;); }); it(\u0026#34;should transfer the contract owner to the new owner\u0026#34;, async () =\u0026gt; { await nft.transferownership(addr2.address); expect(await nft.owner()).to.equal(addr2.address); }); }); different addresses are simulated by using the connect function. the beforeeach function is used to set up the contract and the it function is used to test the contract.\n5.3 hardhat vs forge vs truffle i prefer forge, is faster and closer to the real environment. hardhat right now is optional, but i would recommend using it as an alternative. truffle is now obsolete and will be less and less used in the future.\n6. create a github workflow with tests and slither audit 6.1 create a github workflow create a file named .github/workflows/audit.yml and put this content:\nname: audit on: push: branches: [main, develop] pull_request: branches: [main, develop] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: recursive - name: install foundry uses: foundry-rs/foundry-toolchain@v1 with: version: nightly - name: run forge build run: | forge --version forge build --sizes id: build - name: run forge tests run: | forge test -vvv id: forge-test this will install foundry and run the forge build and tests. 6.2 optional hardat tests if you want to use hardhat add a step that uses yarn to instal the packages and run the command npx hardhat test, this will run the tests with hardhat.\n- name: setup nodejs 14 uses: actions/setup-node@v2 with: node-version: \u0026#34;14\u0026#34; - name: show nodejs version run: npm --version - name: install dependencies run: npm install - name: run hardhat test run: npx hardhat compile; npx hardhat test should look like this: 6.3 add slither audit slither is a solidity static analysis framework written in python 3. it runs a suite of vulnerability detectors, prints visual information about contract details, and provides an api to easily write custom analyses. slither enables developers to find vulnerabilities, enhance their code comprehension, and quickly prototype custom analyses. source\nwe can even add slither manually, but i prefer to use slither-action command. it\u0026rsquo;s a great tool because will push slither\u0026rsquo;s alerts to the security tab of the github project, easing the triaging of findings and improving the continious integration flow.\n- name: slither-action uses: crytic/slither-action@v0.1.1 continue-on-error: true id: slither with: sarif: results.sarif - name: upload sarif file uses: github/codeql-action/upload-sarif@v2 with: sarif_file: ${{ steps.slither.outputs.sarif }} if everything is correct you will this result in the security tab of the github project: 6.4 recap they yaml file is used to create a github workflow that will run the tests and slither audit. should look like this:\nname: hardhat build on: push: branches: [main, develop] pull_request: branches: [main, develop] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: recursive - name: install foundry uses: foundry-rs/foundry-toolchain@v1 with: version: nightly - name: run forge build run: | forge --version forge build --sizes id: build - name: run forge tests run: | forge test -vvv id: forge-test - name: setup nodejs 14 uses: actions/setup-node@v2 with: node-version: \u0026#34;14\u0026#34; - name: show nodejs version run: npm --version - name: install dependencies run: yarn - name: run hardhat test run: npx hardhat compile; npx hardhat test - name: slither-action uses: crytic/slither-action@v0.1.1 continue-on-error: true id: slither with: sarif: results.sarif - name: upload sarif file uses: github/codeql-action/upload-sarif@v2 with: sarif_file: ${{ steps.slither.outputs.sarif }} ","title":"Develop a Soulbound NFT using Foundry and Slither"}]}